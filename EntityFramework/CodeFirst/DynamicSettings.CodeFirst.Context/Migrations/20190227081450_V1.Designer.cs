// <auto-generated />
using System;
using DynamicSettings.CodeFirst.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DynamicSettings.CodeFirst.Context.Migrations
{
    [DbContext(typeof(SettingsManagementDbContext))]
    [Migration("20190227081450_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DynamicSettings.EF.Model.TblGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("TblGroups");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblGroupRight", b =>
                {
                    b.Property<Guid>("GroupID");

                    b.Property<Guid>("RightID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("GroupID", "RightID");

                    b.HasIndex("RightID");

                    b.ToTable("TblGroupRights");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblGroupRole", b =>
                {
                    b.Property<Guid>("GroupID");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("GroupID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("TblGroupRoles");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblRight", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Value");

                    b.HasKey("ID");

                    b.ToTable("TblRights");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("TblRoles");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblRoleRight", b =>
                {
                    b.Property<Guid>("RightID");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RightID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("TblRoleRights");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("TblUsers");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserGroup", b =>
                {
                    b.Property<Guid>("UserID");

                    b.Property<Guid>("GroupID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserID", "GroupID");

                    b.HasAlternateKey("GroupID", "UserID");

                    b.ToTable("TblUserGroups");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserRight", b =>
                {
                    b.Property<Guid>("UserID");

                    b.Property<Guid>("RightID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserID", "RightID");

                    b.HasAlternateKey("RightID", "UserID");

                    b.ToTable("TblUserRights");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserRole", b =>
                {
                    b.Property<Guid>("UserID");

                    b.Property<Guid>("RoleID");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset?>("DateModified");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("TblUserRoles");
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblGroupRight", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblGroup", "TblGroup")
                        .WithMany("TblGroupRights")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblRight", "TblRight")
                        .WithMany("TblGroupRights")
                        .HasForeignKey("RightID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblGroupRole", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblGroup", "TblGroup")
                        .WithMany("TblGroupRoles")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblRole", "TblRole")
                        .WithMany("TblGroupRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblRoleRight", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblRight", "TblRight")
                        .WithMany("TblRoleRights")
                        .HasForeignKey("RightID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblRole", "TblRole")
                        .WithMany("TblRoleRights")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserGroup", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblGroup", "TblGroup")
                        .WithMany("TblUserGroups")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblUser", "TblUser")
                        .WithMany("TblUserGroups")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserRight", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblRight", "TblRight")
                        .WithMany("TblUserRights")
                        .HasForeignKey("RightID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblUser", "TblUser")
                        .WithMany("TblUserRights")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DynamicSettings.EF.Model.TblUserRole", b =>
                {
                    b.HasOne("DynamicSettings.EF.Model.TblRole", "TblRole")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DynamicSettings.EF.Model.TblUser", "TblUser")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
